
openapi: 3.0.0
info:
  title: Multitenant Scheduling System API
  version: 1.0.0
  description: API for multitenant scheduling system for clinics, barbers, and salons

servers:
  - url: https://api.scheduling-system.com/v1
    description: Production server
  - url: https://staging-api.scheduling-system.com/v1
    description: Staging server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Tenant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        subdomain:
          type: string
        logo_url:
          type: string
          nullable: true
        theme:
          type: string
          enum: [default, dental, barber, salon, custom]
        custom_colors:
          type: object
          nullable: true
          properties:
            primary:
              type: string
            secondary:
              type: string
            accent:
              type: string
        features:
          type: object
          properties:
            whatsapp_notifications:
              type: boolean
            email_notifications:
              type: boolean
            financial_module:
              type: boolean
            waiting_list:
              type: boolean
            recurrent_appointments:
              type: boolean
        settings:
          type: object
          properties:
            appointment_duration:
              type: integer
            working_hours:
              type: object
              properties:
                start:
                  type: string
                end:
                  type: string
            working_days:
              type: array
              items:
                type: integer
            cancellation_policy:
              type: object
              properties:
                time_before_in_hours:
                  type: integer
                penalty_percentage:
                  type: integer
        subscription_status:
          type: string
          enum: [trial, active, past_due, cancelled]
        trial_ends_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - name
        - subdomain
    
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenant_id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [super_admin, admin, professional, client]
        avatar_url:
          type: string
          nullable: true
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - name
        - email
        - role
        - tenant_id
    
    ProfessionalProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        tenant_id:
          type: string
          format: uuid
        specialty:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        color:
          type: string
          nullable: true
      required:
        - user_id
        - tenant_id
    
    ClientProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        tenant_id:
          type: string
          format: uuid
        phone:
          type: string
          nullable: true
        birth_date:
          type: string
          format: date
          nullable: true
        address:
          type: string
          nullable: true
        medical_notes:
          type: string
          nullable: true
      required:
        - user_id
        - tenant_id
    
    Appointment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenant_id:
          type: string
          format: uuid
        client_id:
          type: string
          format: uuid
        professional_id:
          type: string
          format: uuid
        service_id:
          type: string
          format: uuid
          nullable: true
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        status:
          type: string
          enum: [scheduled, confirmed, in_progress, completed, cancelled, no_show, rescheduled, waiting_list]
        title:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        cancelled_at:
          type: string
          format: date-time
          nullable: true
        cancelled_by:
          type: string
          format: uuid
          nullable: true
        cancellation_reason:
          type: string
          nullable: true
        reschedule_count:
          type: integer
        previous_appointment:
          type: object
          nullable: true
          properties:
            start_time:
              type: string
              format: date-time
            end_time:
              type: string
              format: date-time
            changed_at:
              type: string
              format: date-time
            changed_by:
              type: string
              format: uuid
        recurrence:
          type: object
          nullable: true
          properties:
            pattern:
              type: string
              enum: [daily, weekly, monthly]
            interval:
              type: integer
            end_date:
              type: string
              format: date
      required:
        - tenant_id
        - client_id
        - professional_id
        - start_time
        - end_time
        - status
    
    Service:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenant_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        duration:
          type: integer
        price:
          type: number
          format: float
        currency:
          type: string
        category_id:
          type: string
          format: uuid
          nullable: true
        is_active:
          type: boolean
      required:
        - tenant_id
        - name
        - duration
        - price
    
    Payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenant_id:
          type: string
          format: uuid
        appointment_id:
          type: string
          format: uuid
          nullable: true
        client_id:
          type: string
          format: uuid
        amount:
          type: number
          format: float
        currency:
          type: string
        status:
          type: string
          enum: [pending, paid, partially_paid, refunded, cancelled]
        method:
          type: string
          enum: [credit_card, debit_card, cash, pix, bank_transfer, other]
          nullable: true
        installments:
          type: integer
          nullable: true
        receipt_url:
          type: string
          nullable: true
      required:
        - tenant_id
        - client_id
        - amount
        - currency
        - status
    
    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenant_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        type:
          type: string
          enum: [welcome, appointment_reminder, appointment_confirmation, appointment_cancellation, appointment_rescheduled, payment_due, payment_received]
        channel:
          type: string
          enum: [email, whatsapp, sms, push]
        content:
          type: string
        sent_at:
          type: string
          format: date-time
          nullable: true
        delivered_at:
          type: string
          format: date-time
          nullable: true
        read_at:
          type: string
          format: date-time
          nullable: true
        status:
          type: string
          enum: [pending, sent, delivered, failed]
      required:
        - tenant_id
        - user_id
        - type
        - channel
        - content
    
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      required:
        - code
        - message

# API Paths
paths:
  /auth/login:
    post:
      summary: Authenticate user and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /tenants:
    get:
      summary: Get all tenants (super_admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          description: Results per page
      responses:
        '200':
          description: List of tenants
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tenant'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
    post:
      summary: Create new tenant
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
      responses:
        '201':
          description: Tenant created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
  
  /tenants/{tenantId}:
    get:
      summary: Get tenant details
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Tenant details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
    put:
      summary: Update tenant
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: tenantId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
      responses:
        '200':
          description: Tenant updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
  
  /appointments:
    get:
      summary: Get appointments
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: start_date
          schema:
            type: string
            format: date
          description: Filter by start date
        - in: query
          name: end_date
          schema:
            type: string
            format: date
          description: Filter by end date
        - in: query
          name: professional_id
          schema:
            type: string
            format: uuid
          description: Filter by professional
        - in: query
          name: client_id
          schema:
            type: string
            format: uuid
          description: Filter by client
        - in: query
          name: status
          schema:
            type: string
          description: Filter by status
      responses:
        '200':
          description: List of appointments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Appointment'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
    post:
      summary: Create new appointment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '201':
          description: Appointment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
  
  /appointments/{appointmentId}:
    get:
      summary: Get appointment details
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: appointmentId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Appointment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
    put:
      summary: Update appointment
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: appointmentId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '200':
          description: Appointment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
  
  /appointments/{appointmentId}/cancel:
    post:
      summary: Cancel appointment
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: appointmentId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        '200':
          description: Appointment cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
  
  /appointments/{appointmentId}/reschedule:
    post:
      summary: Reschedule appointment
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: appointmentId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_start_time:
                  type: string
                  format: date-time
                new_end_time:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Appointment rescheduled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
  
  /professionals/{professionalId}/availability:
    get:
      summary: Get professional availability
      parameters:
        - in: path
          name: professionalId
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: date
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Availability slots
          content:
            application/json:
              schema:
                type: object
                properties:
                  professional_id:
                    type: string
                    format: uuid
                  date:
                    type: string
                    format: date
                  available_slots:
                    type: array
                    items:
                      type: object
                      properties:
                        start_time:
                          type: string
                          format: date-time
                        end_time:
                          type: string
                          format: date-time
                        is_available:
                          type: boolean
  
  /notifications/send:
    post:
      summary: Send notification
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                type:
                  type: string
                  enum: [welcome, appointment_reminder, appointment_confirmation, appointment_cancellation, appointment_rescheduled, payment_due, payment_received]
                channel:
                  type: string
                  enum: [email, whatsapp, sms, push]
                content:
                  type: string
                appointment_id:
                  type: string
                  format: uuid
                  nullable: true
      responses:
        '200':
          description: Notification sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
  
  /webhooks/stripe:
    post:
      summary: Stripe webhook endpoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook processed
  
  /webhooks/whatsapp:
    post:
      summary: WhatsApp webhook endpoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook processed

security:
  - bearerAuth: []
